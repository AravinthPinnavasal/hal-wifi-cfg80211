From 88cfd9adab7871f641796a3d98a8c6febecccede Mon Sep 17 00:00:00 2001
From: "manigandan.gopalakrishnan" <manigandan.gopalakrishnan@ltts.com>
Date: Mon, 13 Jan 2020 17:52:12 +0530
Subject: [PATCH] Formatting code to follow same indentation

Signed-off-by: manigandan.gopalakrishnan <manigandan.gopalakrishnan@ltts.com>
---
 source/wifi/wifi_hal.c | 996 ++++++++++++++++++++++++-------------------------
 1 file changed, 498 insertions(+), 498 deletions(-)

diff --git a/source/wifi/wifi_hal.c b/source/wifi/wifi_hal.c
index 2a1dc80..86b0b79 100644
--- a/source/wifi/wifi_hal.c
+++ b/source/wifi/wifi_hal.c
@@ -375,81 +375,81 @@ INT File_Reading(CHAR *file, char *Value)
 //Restarting the hostapd process
 void restarthostapd_all(char *hostapd_configuration)
 {
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
-	char buf[512] = {0};
-	sprintf(buf,"%s%s%s","ps -eaf | grep ",hostapd_configuration," | grep -v grep | awk '{print $1}' | xargs kill -9");
-	system(buf);
-	system("sleep 3");
-	sprintf(buf,"%s%s","/usr/sbin/hostapd -B ",hostapd_configuration);
-	system(buf);
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
+    char buf[512] = {0};
+    sprintf(buf,"%s%s%s","ps -eaf | grep ",hostapd_configuration," | grep -v grep | awk '{print $1}' | xargs kill -9");
+    system(buf);
+    system("sleep 3");
+    sprintf(buf,"%s%s","/usr/sbin/hostapd -B ",hostapd_configuration);
+    system(buf);
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
 }
 
 void wifi_RestartHostapd_5G(INT radioIndex)
 {
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
-
-	if(radioIndex == 1)
-		system("ps -eaf | grep hostapd1.conf | grep -v grep | awk '{print $1}' | xargs kill -9");
-	else if(radioIndex == 5)
-		system("ps -eaf | grep hostapd5.conf | grep -v grep | awk '{print $1}' | xargs kill -9");
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
 
-	system("rmmod rtl8812au && rmmod 88x2bu");
-	system("sleep 3");
-	system("modprobe rtl8812au && modprobe 88x2bu");
-	system("sleep 5");
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+    if(radioIndex == 1)
+        system("ps -eaf | grep hostapd1.conf | grep -v grep | awk '{print $1}' | xargs kill -9");
+    else if(radioIndex == 5)
+        system("ps -eaf | grep hostapd5.conf | grep -v grep | awk '{print $1}' | xargs kill -9");
+
+    system("rmmod rtl8812au && rmmod 88x2bu");
+    system("sleep 3");
+    system("modprobe rtl8812au && modprobe 88x2bu");
+    system("sleep 5");
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
 }
 
 void wifi_RestartHostapd_2G()
 {
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
-	system("ps -eaf | grep hostapd4.conf | grep -v grep | awk '{print $1}' | xargs kill -9");
-	system("rmmod 8192eu");
-	system("sleep 3");
-	system("modprobe 8192eu");
-	system("sleep 5");
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
+    system("ps -eaf | grep hostapd4.conf | grep -v grep | awk '{print $1}' | xargs kill -9");
+    system("rmmod 8192eu");
+    system("sleep 3");
+    system("modprobe 8192eu");
+    system("sleep 5");
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
 }
 
 void wifi_RestartPrivateWifi_2G()
 {
     WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
-	char buf[512] = {0};
-	char interface_name[512] = {0},rpi_board_status[512] = {0};
-	int count = 0;
-	system("ps -eaf | grep hostapd0.conf | grep -v grep | awk '{print $1}' | xargs kill -9");
+    char buf[512] = {0};
+    char interface_name[512] = {0},rpi_board_status[512] = {0};
+    int count = 0;
+    system("ps -eaf | grep hostapd0.conf | grep -v grep | awk '{print $1}' | xargs kill -9");
     system("sleep 2");
-	_syscmd("cat /proc/device-tree/model | cut -d ' ' -f5-6",buf,sizeof(buf));
+    _syscmd("cat /proc/device-tree/model | cut -d ' ' -f5-6",buf,sizeof(buf));
 
-	for(count = 0;buf[count]!='\n';count++)
+    for(count = 0;buf[count]!='\n';count++)
         rpi_board_status[count] = buf[count]; //ajusting the size
 
-	rpi_board_status[count] = '\0';
+    rpi_board_status[count] = '\0';
 
-	if(strcmp(rpi_board_status,"B Plus") == 0)
-	{
-		GetInterfaceName(interface_name,"/nvram/hostapd0.conf");
-		sprintf(buf,"%s%s%s","ifconfig ",interface_name," down");
-		system(buf);
-	}
-	else
-	{
+    if(strcmp(rpi_board_status,"B Plus") == 0)
+    {
+        GetInterfaceName(interface_name,"/nvram/hostapd0.conf");
+        sprintf(buf,"%s%s%s","ifconfig ",interface_name," down");
+        system(buf);
+    }
+    else
+    {
         system("rmmod brcmfmac");
         system("sleep 3");
         system("modprobe brcmfmac");
         system("sleep 5");
-	}
+    }
     WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
 }
 
 static int writeBandWidth(int radioIndex,char *bw_value)
 {
-	char buf[MAX_BUF_SIZE];
-	char cmd[MAX_CMD_SIZE];
-	sprintf(cmd,"sed -i 's/^SET_BW%d=.*$/SET_BW%d=%s/' %s",radioIndex,radioIndex,bw_value,BW_FNAME);
-	_syscmd(cmd,buf,sizeof(buf));
-	return RETURN_OK;
+    char buf[MAX_BUF_SIZE];
+    char cmd[MAX_CMD_SIZE];
+    sprintf(cmd,"sed -i 's/^SET_BW%d=.*$/SET_BW%d=%s/' %s",radioIndex,radioIndex,bw_value,BW_FNAME);
+    _syscmd(cmd,buf,sizeof(buf));
+    return RETURN_OK;
 }
 
 static int readBandWidth(int radioIndex,char *bw_value)
@@ -556,76 +556,76 @@ static INT get_param_value(char *parameter, char *output)
 static INT prepare_hostapd_conf()
 {
     WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
-	char cmd[128];
+    char cmd[128];
     /* check  /usr/ccsp/wifi/hostapd0.conf, /usr/ccsp/wifi/hostapd0.conf , /usr/ccsp/wifi/hostapd4.conf,/usr/ccsp/wifi/hostapd5.conf exists or not */
-	if(( access(DEF_HOSTAPD_CONF_0, F_OK) != -1 ) && ( access(DEF_HOSTAPD_CONF_1, F_OK) != -1 ) && ( access(DEF_HOSTAPD_CONF_4, F_OK) != -1 ) && ( access(DEF_HOSTAPD_CONF_5, F_OK) != -1 ))
-	{
-		wifi_dbg_printf("\n[%s]: Default files %s and %s presents!!\n",__func__,DEF_HOSTAPD_CONF_0,DEF_HOSTAPD_CONF_1);
-	}
-	else
-	{
-		wifi_dbg_printf("\n[%s]: Default files %s and %s not presents!!\n",__func__,DEF_HOSTAPD_CONF_0,DEF_HOSTAPD_CONF_1);
-		return RETURN_ERR;
-	}
+    if(( access(DEF_HOSTAPD_CONF_0, F_OK) != -1 ) && ( access(DEF_HOSTAPD_CONF_1, F_OK) != -1 ) && ( access(DEF_HOSTAPD_CONF_4, F_OK) != -1 ) && ( access(DEF_HOSTAPD_CONF_5, F_OK) != -1 ))
+    {
+        wifi_dbg_printf("\n[%s]: Default files %s and %s presents!!\n",__func__,DEF_HOSTAPD_CONF_0,DEF_HOSTAPD_CONF_1);
+    }
+    else
+    {
+        wifi_dbg_printf("\n[%s]: Default files %s and %s not presents!!\n",__func__,DEF_HOSTAPD_CONF_0,DEF_HOSTAPD_CONF_1);
+        return RETURN_ERR;
+    }
     /* check  /nvram/hostapd0.conf exists or not */
-	if( access(HOSTAPD_CONF_0, F_OK) != -1 )
-	{
-		wifi_dbg_printf("\n[%s]: %s file already exits!!\n",__func__,HOSTAPD_CONF_0);
-	}
-	else
-	{
-		wifi_dbg_printf("\n[%s]: %s file does not exits. Preparing from %s file\n",__func__,HOSTAPD_CONF_0,DEF_HOSTAPD_CONF_0);
-		sprintf(cmd, "cp %s %s",DEF_HOSTAPD_CONF_0,HOSTAPD_CONF_0);
-		system(cmd);
-	}
+    if( access(HOSTAPD_CONF_0, F_OK) != -1 )
+    {
+        wifi_dbg_printf("\n[%s]: %s file already exits!!\n",__func__,HOSTAPD_CONF_0);
+    }
+    else
+    {
+        wifi_dbg_printf("\n[%s]: %s file does not exits. Preparing from %s file\n",__func__,HOSTAPD_CONF_0,DEF_HOSTAPD_CONF_0);
+        sprintf(cmd, "cp %s %s",DEF_HOSTAPD_CONF_0,HOSTAPD_CONF_0);
+        system(cmd);
+    }
 
     /* check  /nvram/hostapd1.conf exists or not */
-	if( access(HOSTAPD_CONF_1, F_OK) != -1 )
-	{
-		wifi_dbg_printf("\n[%s]: %s file already exits!!\n",__func__,HOSTAPD_CONF_1);
-	}
-	else
-	{
-		wifi_dbg_printf("\n[%s]: %s file does not exits. Preparing from %s file\n",__func__,HOSTAPD_CONF_1,DEF_HOSTAPD_CONF_1);
-		sprintf(cmd, "cp %s %s",DEF_HOSTAPD_CONF_1,HOSTAPD_CONF_1);
-		system(cmd);
-	}
+    if( access(HOSTAPD_CONF_1, F_OK) != -1 )
+    {
+        wifi_dbg_printf("\n[%s]: %s file already exits!!\n",__func__,HOSTAPD_CONF_1);
+    }
+    else
+    {
+        wifi_dbg_printf("\n[%s]: %s file does not exits. Preparing from %s file\n",__func__,HOSTAPD_CONF_1,DEF_HOSTAPD_CONF_1);
+        sprintf(cmd, "cp %s %s",DEF_HOSTAPD_CONF_1,HOSTAPD_CONF_1);
+        system(cmd);
+    }
 
     /* check  /nvram/hostapd4.conf exists or not */
-	if( access(HOSTAPD_CONF_4, F_OK) != -1 )
-	{
-		wifi_dbg_printf("\n[%s]: %s file already exits!!\n",__func__,HOSTAPD_CONF_4);
-	}
-	else
-	{
-		wifi_dbg_printf("\n[%s]: %s file does not exits. Preparing from %s file\n",__func__,HOSTAPD_CONF_4,DEF_HOSTAPD_CONF_4);
-		sprintf(cmd, "cp %s %s",DEF_HOSTAPD_CONF_4,HOSTAPD_CONF_4);
-		system(cmd);
-	}
+    if( access(HOSTAPD_CONF_4, F_OK) != -1 )
+    {
+        wifi_dbg_printf("\n[%s]: %s file already exits!!\n",__func__,HOSTAPD_CONF_4);
+    }
+    else
+    {
+        wifi_dbg_printf("\n[%s]: %s file does not exits. Preparing from %s file\n",__func__,HOSTAPD_CONF_4,DEF_HOSTAPD_CONF_4);
+        sprintf(cmd, "cp %s %s",DEF_HOSTAPD_CONF_4,HOSTAPD_CONF_4);
+        system(cmd);
+    }
 
     /* check  /nvram/hostapd5.conf exists or not */
-	if( access(HOSTAPD_CONF_5, F_OK) != -1 )
-	{
-		wifi_dbg_printf("\n[%s]: %s file already exits!!\n",__func__,HOSTAPD_CONF_5);
-	}
-	else
-	{
-		wifi_dbg_printf("\n[%s]: %s file does not exits. Preparing from %s file\n",__func__,HOSTAPD_CONF_5,DEF_HOSTAPD_CONF_5);
-		sprintf(cmd, "cp %s %s",DEF_HOSTAPD_CONF_5,HOSTAPD_CONF_5);
-		system(cmd);
-	}
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
-	return RETURN_OK;
+    if( access(HOSTAPD_CONF_5, F_OK) != -1 )
+    {
+        wifi_dbg_printf("\n[%s]: %s file already exits!!\n",__func__,HOSTAPD_CONF_5);
+    }
+    else
+    {
+        wifi_dbg_printf("\n[%s]: %s file does not exits. Preparing from %s file\n",__func__,HOSTAPD_CONF_5,DEF_HOSTAPD_CONF_5);
+        sprintf(cmd, "cp %s %s",DEF_HOSTAPD_CONF_5,HOSTAPD_CONF_5);
+        system(cmd);
+    }
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+    return RETURN_OK;
 }
 
 INT wifi_setApBeaconRate(INT radioIndex,CHAR *beaconRate)
 {
-	return 0;
+    return 0;
 }
 
 INT wifi_getApBeaconRate(INT radioIndex, CHAR *beaconRate)
 {
-	return 0;
+    return 0;
 }
 
 INT wifi_setLED(INT radioIndex, BOOL enable)
@@ -643,8 +643,9 @@ INT wifi_setLED(INT radioIndex, BOOL enable)
 //Get the wifi hal version in string, eg "2.0.0".  WIFI_HAL_MAJOR_VERSION.WIFI_HAL_MINOR_VERSION.WIFI_HAL_MAINTENANCE_VERSION
 INT wifi_getHalVersion(CHAR *output_string)   //RDKB   
 {
-	snprintf(output_string, 64, "%d.%d.%d", WIFI_HAL_MAJOR_VERSION, WIFI_HAL_MINOR_VERSION, WIFI_HAL_MAINTENANCE_VERSION);
-	return RETURN_OK;
+    snprintf(output_string, 64, "%d.%d.%d", WIFI_HAL_MAJOR_VERSION, WIFI_HAL_MINOR_VERSION, WIFI_HAL_MAINTENANCE_VERSION);
+
+    return RETURN_OK;
 }
 
 
@@ -846,16 +847,16 @@ INT wifi_init()                            //RDKB
     //Not intitializing macfilter for Turris-Omnia Platform for now
     //macfilter_init();
 
-	/* preparing hostapd configuration*/
-	if(RETURN_ERR == prepare_hostapd_conf())
-	{
-		return RETURN_ERR;
-	}
+    /* preparing hostapd configuration*/
+    if(RETURN_ERR == prepare_hostapd_conf())
+    {
+        return RETURN_ERR;
+    }
 
     if( ( RETURN_ERR == _syscmd("syscfg get lan_ifname",bridge_name,sizeof(bridge_name)) ) || 
         ( RETURN_ERR == _syscmd("iwconfig | grep -r \"IEEE 802.11\" | cut -d \" \" -f1 | tr '\n' ' '",interface,sizeof(interface)) ) )
     {
-		return RETURN_ERR;
+        return RETURN_ERR;
     }
 
     system("/usr/sbin/iw reg set US");
@@ -1258,7 +1259,7 @@ INT wifi_getRadioMaxBitRate(INT radioIndex, CHAR *output_string)	//RDKB
     int apIndex;
 
     if (NULL == output_string) 
-		return RETURN_ERR;
+        return RETURN_ERR;
 
     apIndex=(radioIndex==0)?0:1;
 
@@ -1267,7 +1268,7 @@ INT wifi_getRadioMaxBitRate(INT radioIndex, CHAR *output_string)	//RDKB
 
     snprintf(output_string, 64, "%s", buf);
     WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
-	return RETURN_OK;
+    return RETURN_OK;
 }
 #endif
 
@@ -1280,7 +1281,7 @@ INT wifi_getRadioSupportedFrequencyBands(INT radioIndex, CHAR *output_string)	//
     if (NULL == output_string)
         return RETURN_ERR;
     snprintf(output_string, 64, "2.4GHz,5GHz");
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
 
     return RETURN_OK;
 #if 0
@@ -1292,16 +1293,16 @@ INT wifi_getRadioSupportedFrequencyBands(INT radioIndex, CHAR *output_string)	//
 
         WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
         if (NULL == output_string)
-	        return RETURN_ERR;
+            return RETURN_ERR;
 
 
-		sprintf(cmd,"grep 'channel=' %s%d.conf",CONFIG_PREFIX,radioIndex);
+        sprintf(cmd,"grep 'channel=' %s%d.conf",CONFIG_PREFIX,radioIndex);
 
    		if(_syscmd(cmd,buf,sizeof(buf)) == RETURN_ERR)
-	    {
+        {
     	    printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
-	        return RETURN_ERR;
-	    }
+            return RETURN_ERR;
+        }
         ch=strchr(buf,'\n');
         *ch='\0';
         ch=strchr(buf,'=');
@@ -1317,18 +1318,18 @@ INT wifi_getRadioSupportedFrequencyBands(INT radioIndex, CHAR *output_string)	//
            ch=strcat(buf,ch);
 
 
-		sprintf(cmd,"grep 'interface=' %s%d.conf",CONFIG_PREFIX,radioIndex);
+       sprintf(cmd,"grep 'interface=' %s%d.conf",CONFIG_PREFIX,radioIndex);
 
         if(_syscmd(cmd,str,64) ==  RETURN_ERR)
         {
                 wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
                 return RETURN_ERR;
-		}
+        }
 
 
-		ch2=strchr(str,'\n');
-		//replace \n with \0
-		*ch2='\0';
+        ch2=strchr(str,'\n');
+        //replace \n with \0
+        *ch2='\0';
         ch2=strchr(str,'=');
         if(ch2==NULL)
         {
@@ -1346,17 +1347,17 @@ INT wifi_getRadioSupportedFrequencyBands(INT radioIndex, CHAR *output_string)	//
 
         memset(buf,'\0',sizeof(buf));
         if(_syscmd(cmd,buf,sizeof(buf))==RETURN_ERR)
-		{
-			wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
-			return RETURN_ERR;
-		}
-		if (strstr(buf,"2.4") != NULL )
-			strcpy(output_string,"2.4GHz");
-		else if(strstr(buf,"5.") != NULL )
-			strcpy(output_string,"5GHz");
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
-
-	return RETURN_OK;
+        {
+            wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
+            return RETURN_ERR;
+        }
+        if (strstr(buf,"2.4") != NULL )
+            strcpy(output_string,"2.4GHz");
+        else if(strstr(buf,"5.") != NULL )
+            strcpy(output_string,"5GHz");
+        WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+
+    return RETURN_OK;
 #endif
 }
 
@@ -1368,86 +1369,86 @@ INT wifi_getRadioOperatingFrequencyBand(INT radioIndex, CHAR *output_string) //T
     if (NULL == output_string)
         return RETURN_ERR;
     snprintf(output_string, 64, (radioIndex == 0)?"2.4GHz":"5GHz");
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
 
     return RETURN_OK;
 #if 0
     WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
-        char buf[MAX_BUF_SIZE]={'\0'};
-        char str[MAX_BUF_SIZE]={'\0'};
-        char cmd[MAX_CMD_SIZE]={'\0'};
-        char *ch=NULL;
-        char *ch2=NULL;
-	char ch1[5]="0";
+    char buf[MAX_BUF_SIZE]={'\0'};
+    char str[MAX_BUF_SIZE]={'\0'};
+    char cmd[MAX_CMD_SIZE]={'\0'};
+    char *ch=NULL;
+    char *ch2=NULL;
+    char ch1[5]="0";
 
-	sprintf(cmd,"grep 'channel=' %s%d.conf",CONFIG_PREFIX,radioIndex);
+    sprintf(cmd,"grep 'channel=' %s%d.conf",CONFIG_PREFIX,radioIndex);
 
-	if(_syscmd(cmd,buf,sizeof(buf)) == RETURN_ERR)
-        {
-                printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
-	        return RETURN_ERR;
-        }
+    if(_syscmd(cmd,buf,sizeof(buf)) == RETURN_ERR)
+    {
+        printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
+        return RETURN_ERR;
+    }
 
-        ch=strchr(buf,'\n');
-        *ch='\0';
-	ch=strchr(buf,'=');
-        if(ch==NULL)
-          return RETURN_ERR;
-	ch++;
+    ch=strchr(buf,'\n');
+    *ch='\0';
+    ch=strchr(buf,'=');
+    if(ch==NULL)
+        return RETURN_ERR;
+    ch++;
 
-	if(strlen(ch)==1)
-	{
-	   	strcat(ch1,ch);
+    if(strlen(ch)==1)
+    {
+        strcat(ch1,ch);
 
-	}
-	else
-	{
-		strcpy(ch1,ch);
-	}
+    }
+    else
+    {
+        strcpy(ch1,ch);
+    }
 
 
 
-	sprintf(cmd,"grep 'interface=' %s%d.conf",CONFIG_PREFIX,radioIndex);
-        if(_syscmd(cmd,str,64) ==  RETURN_ERR)
-        {
-                wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
-                return RETURN_ERR;
-		}
+    sprintf(cmd,"grep 'interface=' %s%d.conf",CONFIG_PREFIX,radioIndex);
+    if(_syscmd(cmd,str,64) ==  RETURN_ERR)
+    {
+        wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
+        return RETURN_ERR;
+    }
 
 
-		ch2=strchr(str,'\n');
-		//replace \n with \0
-		*ch2='\0';
-        ch2=strchr(str,'=');
-        if(ch2==NULL)
-        {
-        	wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
-       		return RETURN_ERR;
-        }
-        else
-         wifi_dbg_printf("%s",ch2+1);
-	ch2++;
+    ch2=strchr(str,'\n');
+    //replace \n with \0
+    *ch2='\0';
+    ch2=strchr(str,'=');
+    if(ch2==NULL)
+    {
+        wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
+        return RETURN_ERR;
+    }
+    else
+        wifi_dbg_printf("%s",ch2+1);
+    ch2++;
 
 
-        sprintf(cmd,"iwlist %s frequency|grep 'Channel %s'",ch2,ch1);
-        memset(buf,'\0',sizeof(buf));
-        if(_syscmd(cmd,buf,sizeof(buf))==RETURN_ERR)
-	{
-		wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
-		return RETURN_ERR;
-	}
+    sprintf(cmd,"iwlist %s frequency|grep 'Channel %s'",ch2,ch1);
+    memset(buf,'\0',sizeof(buf));
+    if(_syscmd(cmd,buf,sizeof(buf))==RETURN_ERR)
+    {
+        wifi_dbg_printf("\nError %d:%s:%s\n",__LINE__,__func__,__FILE__);
+        return RETURN_ERR;
+    }
 
 
-	if(strstr(buf,"2.4")!=NULL)
-	{
-		strcpy(output_string,"2.4GHz");
-	}
-	if(strstr(buf,"5.")!=NULL)
-        {
-                strcpy(output_string,"5GHz");
-        }
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
-	return RETURN_OK;
+    if(strstr(buf,"2.4")!=NULL)
+    {
+        strcpy(output_string,"2.4GHz");
+    }
+    if(strstr(buf,"5.")!=NULL)
+    {
+        strcpy(output_string,"5GHz");
+    }
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+    return RETURN_OK;
 #endif
 }
 
@@ -1745,18 +1746,18 @@ INT wifi_getRadioChannel(INT radioIndex,ULONG *output_ulong)	//RDKB
 //Storing the previous channel value
 INT wifi_storeprevchanval(INT radioIndex)
 {
-	char buf[256] = {0};
-	char output[4]={'\0'};
-	char config_file[MAX_BUF_SIZE] = {0};
-	sprintf(config_file,"%s%d.conf",CONFIG_PREFIX,radioIndex);
-	wifi_hostapdRead(config_file, "channel", output, sizeof(output));
-	if(radioIndex == 0)
-		sprintf(buf,"%s%s%s","echo ",output," > /var/prevchanval2G_AutoChannelEnable");
-	else if(radioIndex == 1)
-		sprintf(buf,"%s%s%s","echo ",output," > /var/prevchanval5G_AutoChannelEnable");
-	system(buf);
-	Radio_flag = FALSE;
-	return RETURN_OK;
+    char buf[256] = {0};
+    char output[4]={'\0'};
+    char config_file[MAX_BUF_SIZE] = {0};
+    sprintf(config_file,"%s%d.conf",CONFIG_PREFIX,radioIndex);
+    wifi_hostapdRead(config_file, "channel", output, sizeof(output));
+    if(radioIndex == 0)
+        sprintf(buf,"%s%s%s","echo ",output," > /var/prevchanval2G_AutoChannelEnable");
+    else if(radioIndex == 1)
+        sprintf(buf,"%s%s%s","echo ",output," > /var/prevchanval5G_AutoChannelEnable");
+    system(buf);
+    Radio_flag = FALSE;
+    return RETURN_OK;
 }
 
 //Set the running channel number
@@ -1775,9 +1776,9 @@ INT wifi_setRadioChannel(INT radioIndex, ULONG channel)	//RDKB	//AP only
 
     if(radioIndex == 0)
     {
-	switch(channel)
-	{
-	    case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
+        switch(channel)
+        {
+            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12:
                 sprintf(str_channel,"%ld", channel);
                 list.value = str_channel;
                 break;
@@ -1807,48 +1808,48 @@ INT wifi_setRadioChannel(INT radioIndex, ULONG channel)	//RDKB	//AP only
 //This "auto channel" means the auto channel selection when radio is up. (which is different from the dynamic channel/frequency selection (DFC/DCS))
 INT wifi_setRadioAutoChannelEnable(INT radioIndex, BOOL enable) //RDKB
 {
-	//Set to wifi config only. Wait for wifi reset to apply.
-	char buf[256] = {0};
-	char str_channel[256] = {0};
-	int count = 0;
-	ULONG Value = 0;
-	FILE *fp = NULL;
-	if(enable == TRUE)
-	{
-		if(radioIndex == 0)
-		{
-			//	_syscmd("cat /var/prevchanval2G_AutoChannelEnable", buf, sizeof(buf));
-			fp = fopen("/var/prevchanval2G_AutoChannelEnable","r");
-		}
-		else if(radioIndex == 1)
-		{
-			//	_syscmd("cat /var/prevchanval5G_AutoChannelEnable", buf, sizeof(buf));
-			fp = fopen("/var/prevchanval5G_AutoChannelEnable","r");
-		}
-		if(fp == NULL) //first time boot-up
-		{
-			if(radioIndex == 0)
-				Value = 6;
-			else if(radioIndex == 1)
-				Value = 36;
-		}
-		else
-		{
-			if(fgets(buf,sizeof(buf),fp) != NULL)
-			{
-				for(count = 0;buf[count]!='\n';count++)
-					str_channel[count] = buf[count];
-				str_channel[count] = '\0';
-				Value = atol(str_channel);
-				printf("%sValue is %ld \n",__FUNCTION__,Value);
-			pclose(fp);
-			}
-		}
-		Radio_flag = FALSE;//for storing previous channel value
-		wifi_setRadioChannel(radioIndex,Value);
-		return RETURN_OK;
-	}
-	return RETURN_ERR;
+    //Set to wifi config only. Wait for wifi reset to apply.
+    char buf[256] = {0};
+    char str_channel[256] = {0};
+    int count = 0;
+    ULONG Value = 0;
+    FILE *fp = NULL;
+    if(enable == TRUE)
+    {
+        if(radioIndex == 0)
+        {
+            //	_syscmd("cat /var/prevchanval2G_AutoChannelEnable", buf, sizeof(buf));
+            fp = fopen("/var/prevchanval2G_AutoChannelEnable","r");
+        }
+        else if(radioIndex == 1)
+        {
+            //	_syscmd("cat /var/prevchanval5G_AutoChannelEnable", buf, sizeof(buf));
+            fp = fopen("/var/prevchanval5G_AutoChannelEnable","r");
+        }
+        if(fp == NULL) //first time boot-up
+        {
+            if(radioIndex == 0)
+                Value = 6;
+            else if(radioIndex == 1)
+                Value = 36;
+        }
+        else
+        {
+            if(fgets(buf,sizeof(buf),fp) != NULL)
+            {
+                for(count = 0;buf[count]!='\n';count++)
+                    str_channel[count] = buf[count];
+                str_channel[count] = '\0';
+                Value = atol(str_channel);
+                printf("%sValue is %ld \n",__FUNCTION__,Value);
+                pclose(fp);
+            }
+        }
+        Radio_flag = FALSE;//for storing previous channel value
+        wifi_setRadioChannel(radioIndex,Value);
+        return RETURN_OK;
+    }
+    return RETURN_ERR;
 }
 
 INT wifi_getRadioDCSSupported(INT radioIndex, BOOL *output_bool) 	//RDKB
@@ -1938,8 +1939,8 @@ INT wifi_getRadioDCSScanTime(INT radioIndex, INT *output_interval_seconds, INT *
 
 INT wifi_setRadioDCSScanTime(INT radioIndex, INT interval_seconds, INT dwell_milliseconds)
 {
-	//Set to wifi config. And apply instantly.
-	return RETURN_OK;
+    //Set to wifi config. And apply instantly.
+    return RETURN_OK;
 }
 
 //Get the Dfs enable status
@@ -1955,7 +1956,7 @@ INT wifi_getRadioDfsEnable(INT radioIndex, BOOL *output_bool)	//Tr181
 //Set the Dfs enable status
 INT wifi_setRadioDfsEnable(INT radioIndex, BOOL enable)	//Tr181
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Check if the driver support the AutoChannelRefreshPeriod
@@ -1981,7 +1982,7 @@ INT wifi_getRadioAutoChannelRefreshPeriod(INT radioIndex, ULONG *output_ulong) /
 //Set the ACS refresh period in seconds
 INT wifi_setRadioDfsRefreshPeriod(INT radioIndex, ULONG seconds) //Tr181
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Get the Operating Channel Bandwidth. eg "20MHz", "40MHz", "80MHz", "80+80", "160"
@@ -2043,17 +2044,17 @@ INT wifi_setRadioOperatingChannelBandwidth(INT radioIndex, CHAR *output_string)
     if(strcmp(output_string,"20MHz") == 0)  // This piece of code only support for wifi hal api's validation
         params.value="0";
     else if(strcmp(output_string,"40MHz") == 0)
-	params.value="0";
+        params.value="0";
     else if(strcmp(output_string,"80MHz") == 0)
-	params.value="1";
+        params.value="1";
     else if(strcmp(output_string,"160MHz") == 0)
-	params.value="2";
+        params.value="2";
     else if(strcmp(output_string,"80+80") == 0)
-	params.value="3";
+        params.value="3";
     else
     {
         printf("Invalid Bandwidth \n");
-	return RETURN_ERR;
+        return RETURN_ERR;
     }
 
     sprintf(config_file,"%s%d.conf",CONFIG_PREFIX,radioIndex);
@@ -2062,14 +2063,14 @@ INT wifi_setRadioOperatingChannelBandwidth(INT radioIndex, CHAR *output_string)
     if(radioIndex == 1)
     {
         params.name= "ieee80211n";
-	if(strcmp(output_string,"20MHz") == 0)
-	    output_string="0";
-	else if(strcmp(output_string,"40MHz") == 0)
-	    output_string="1";
+        if(strcmp(output_string,"20MHz") == 0)
+            output_string="0";
+        else if(strcmp(output_string,"40MHz") == 0)
+            output_string="1";
 
-	params.value = output_string;
+        params.value = output_string;
         sprintf(config_file,"%s%d.conf",CONFIG_PREFIX,radioIndex);
-	wifi_hostapdWrite(config_file,&params,1);
+        wifi_hostapdWrite(config_file,&params,1);
     }
 
     WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
@@ -2079,15 +2080,15 @@ INT wifi_setRadioOperatingChannelBandwidth(INT radioIndex, CHAR *output_string)
 //Getting current radio extension channel
 INT wifi_halgetRadioExtChannel(CHAR *file,CHAR *Value)
 {
-        CHAR buf[150] = {0};
-        CHAR cmd[150] = {0};
-        sprintf(cmd,"%s%s%s","cat ",file," | grep -w ht_capab=");
-        _syscmd(cmd, buf, sizeof(buf));
-        if(NULL != strstr(buf,"HT40+"))
-                strcpy(Value,"AboveControlChannel");
-        else if(NULL != strstr(buf,"HT40-"))
-                 strcpy(Value,"BelowControlChannel");
-        return RETURN_OK;
+    CHAR buf[150] = {0};
+    CHAR cmd[150] = {0};
+    sprintf(cmd,"%s%s%s","cat ",file," | grep -w ht_capab=");
+    _syscmd(cmd, buf, sizeof(buf));
+    if(NULL != strstr(buf,"HT40+"))
+        strcpy(Value,"AboveControlChannel");
+    else if(NULL != strstr(buf,"HT40-"))
+        strcpy(Value,"BelowControlChannel");
+    return RETURN_OK;
 }
 
 //Get the secondary extension channel position, "AboveControlChannel" or "BelowControlChannel". (this is for 40MHz and 80MHz bandwith only)
@@ -2182,7 +2183,7 @@ INT wifi_getRadioMCS(INT radioIndex, INT *output_int) //Tr181
 //Set the Modulation Coding Scheme index
 INT wifi_setRadioMCS(INT radioIndex, INT MCS) //Tr181
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Get supported Transmit Power list, eg : "0,25,50,75,100"
@@ -2254,7 +2255,7 @@ INT wifi_getRadioIEEE80211hEnabled(INT radioIndex, BOOL *enable) //Tr181
 //Set 80211h feature enable
 INT wifi_setRadioIEEE80211hEnabled(INT radioIndex, BOOL enable)  //Tr181
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Indicates the Carrier Sense ranges supported by the radio. It is measured in dBm. Refer section A.2.3.2 of CableLabs Wi-Fi MGMT Specification.
@@ -2270,16 +2271,16 @@ INT wifi_getRadioCarrierSenseThresholdRange(INT radioIndex, INT *output)  //P3
 //The RSSI signal level at which CS/CCA detects a busy condition. This attribute enables APs to increase minimum sensitivity to avoid detecting busy condition from multiple/weak Wi-Fi sources in dense Wi-Fi environments. It is measured in dBm. Refer section A.2.3.2 of CableLabs Wi-Fi MGMT Specification.
 INT wifi_getRadioCarrierSenseThresholdInUse(INT radioIndex, INT *output)	//P3
 {
-	if (NULL == output)
-		return RETURN_ERR;
-	*output = -99;
+    if (NULL == output)
+        return RETURN_ERR;
+    *output = -99;
 
-	return RETURN_OK;
+    return RETURN_OK;
 }
 
 INT wifi_setRadioCarrierSenseThresholdInUse(INT radioIndex, INT threshold)	//P3
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 
@@ -2295,7 +2296,7 @@ INT wifi_getRadioBeaconPeriod(INT radioIndex, UINT *output)
  
 INT wifi_setRadioBeaconPeriod(INT radioIndex, UINT BeaconPeriod)
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Comma-separated list of strings. The set of data rates, in Mbps, that have to be supported by all stations that desire to join this BSS. The stations have to be able to receive and transmit at each of the data rates listed inBasicDataTransmitRates. For example, a value of "1,2", indicates that stations support 1 Mbps and 2 Mbps. Most control packets use a data rate in BasicDataTransmitRates.
@@ -2448,123 +2449,123 @@ INT wifi_setRadioBasicDataTransmitRates(INT radioIndex, CHAR *TransmitRates)
 //passing the hostapd configuration file and get the virtual interface of xfinity(2g)
 INT GetInterfaceName_virtualInterfaceName_2G(char interface_name[50])
 {
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n", __func__, __LINE__);
-	FILE *fp = NULL;
-	char path[256] = {0}, output_string[256] = {0};
-	int count = 0;
-	char *interface = NULL;
-
-	fp = popen("cat /nvram/hostapd0.conf | grep -w bss", "r");
-	if (fp == NULL)
-	{
-		printf("Failed to run command in Function %s\n", __FUNCTION__);
-		return RETURN_ERR;
-	}
-	if (fgets(path, sizeof(path) - 1, fp) != NULL)
-	{
-		interface = strchr(path, '=');
-
-		if (interface != NULL)
-		{
-			strcpy(output_string, interface + 1);
-			for (count = 0; output_string[count] != '\n' || output_string[count] != '\0'; count++)
-				interface_name[count] = output_string[count];
-
-			interface_name[count] = '\0';
-		}
-	}
-	pclose(fp);
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n", __func__, __LINE__);
-	return RETURN_OK;
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n", __func__, __LINE__);
+    FILE *fp = NULL;
+    char path[256] = {0}, output_string[256] = {0};
+    int count = 0;
+    char *interface = NULL;
+
+    fp = popen("cat /nvram/hostapd0.conf | grep -w bss", "r");
+    if (fp == NULL)
+    {
+        printf("Failed to run command in Function %s\n", __FUNCTION__);
+        return RETURN_ERR;
+    }
+    if (fgets(path, sizeof(path) - 1, fp) != NULL)
+    {
+        interface = strchr(path, '=');
+
+        if (interface != NULL)
+        {
+            strcpy(output_string, interface + 1);
+            for (count = 0; output_string[count] != '\n' || output_string[count] != '\0'; count++)
+                interface_name[count] = output_string[count];
+
+            interface_name[count] = '\0';
+        }
+    }
+    pclose(fp);
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n", __func__, __LINE__);
+    return RETURN_OK;
 }
 
 INT wifi_halGetIfStatsNull(wifi_radioTrafficStats2_t *output_struct)
 {
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n", __func__, __LINE__);
-	output_struct->radio_BytesSent = 0;
-	output_struct->radio_BytesReceived = 0;
-	output_struct->radio_PacketsSent = 0;
-	output_struct->radio_PacketsReceived = 0;
-	output_struct->radio_ErrorsSent = 0;
-	output_struct->radio_ErrorsReceived = 0;
-	output_struct->radio_DiscardPacketsSent = 0;
-	output_struct->radio_DiscardPacketsReceived = 0;
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n", __func__, __LINE__);
-	return RETURN_OK;
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n", __func__, __LINE__);
+    output_struct->radio_BytesSent = 0;
+    output_struct->radio_BytesReceived = 0;
+    output_struct->radio_PacketsSent = 0;
+    output_struct->radio_PacketsReceived = 0;
+    output_struct->radio_ErrorsSent = 0;
+    output_struct->radio_ErrorsReceived = 0;
+    output_struct->radio_DiscardPacketsSent = 0;
+    output_struct->radio_DiscardPacketsReceived = 0;
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n", __func__, __LINE__);
+    return RETURN_OK;
 }
 
 
 INT wifi_halGetIfStats(char *ifname, wifi_radioTrafficStats2_t *pStats)
 {
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n", __func__, __LINE__);
-	CHAR buf[MAX_CMD_SIZE] = {0};
-	CHAR Value[MAX_BUF_SIZE] = {0};
-	FILE *fp = NULL;
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n", __func__, __LINE__);
+    CHAR buf[MAX_CMD_SIZE] = {0};
+    CHAR Value[MAX_BUF_SIZE] = {0};
+    FILE *fp = NULL;
 
-	if (ifname == NULL || strlen(ifname) <= 1)
-		return RETURN_OK;
+    if (ifname == NULL || strlen(ifname) <= 1)
+        return RETURN_OK;
 
-	snprintf(buf, sizeof(buf), "ifconfig -a %s > /tmp/Radio_Stats.txt", ifname);
-	system(buf);
+    snprintf(buf, sizeof(buf), "ifconfig -a %s > /tmp/Radio_Stats.txt", ifname);
+    system(buf);
 
-	fp = fopen("/tmp/Radio_Stats.txt", "r");
-	if(fp == NULL)
-	{
-		printf("/tmp/Radio_Stats.txt not exists \n");
-		return RETURN_ERR;
-	}
-	fclose(fp);
+    fp = fopen("/tmp/Radio_Stats.txt", "r");
+    if(fp == NULL)
+    {
+        printf("/tmp/Radio_Stats.txt not exists \n");
+        return RETURN_ERR;
+    }
+    fclose(fp);
 
-	sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'RX packets' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
-	File_Reading(buf, Value);
-	pStats->radio_PacketsReceived = strtoul(Value, NULL, 10);
+    sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'RX packets' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
+    File_Reading(buf, Value);
+    pStats->radio_PacketsReceived = strtoul(Value, NULL, 10);
 
-	sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'TX packets' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
-	File_Reading(buf, Value);
-	pStats->radio_PacketsSent = strtoul(Value, NULL, 10);
+    sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'TX packets' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
+    File_Reading(buf, Value);
+    pStats->radio_PacketsSent = strtoul(Value, NULL, 10);
 
-	sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'RX bytes' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
-	File_Reading(buf, Value);
-	pStats->radio_BytesReceived = strtoul(Value, NULL, 10);
+    sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'RX bytes' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
+    File_Reading(buf, Value);
+    pStats->radio_BytesReceived = strtoul(Value, NULL, 10);
 
-	sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'TX bytes' | tr -s ' ' | cut -d ':' -f3 | cut -d ' ' -f1");
-	File_Reading(buf, Value);
-	pStats->radio_BytesSent = strtoul(Value, NULL, 10);
+    sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'TX bytes' | tr -s ' ' | cut -d ':' -f3 | cut -d ' ' -f1");
+    File_Reading(buf, Value);
+    pStats->radio_BytesSent = strtoul(Value, NULL, 10);
 
-	sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'RX packets' | tr -s ' ' | cut -d ':' -f3 | cut -d ' ' -f1");
-	File_Reading(buf, Value);
-	pStats->radio_ErrorsReceived = strtoul(Value, NULL, 10);
+    sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'RX packets' | tr -s ' ' | cut -d ':' -f3 | cut -d ' ' -f1");
+    File_Reading(buf, Value);
+    pStats->radio_ErrorsReceived = strtoul(Value, NULL, 10);
 
-	sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'TX packets' | tr -s ' ' | cut -d ':' -f3 | cut -d ' ' -f1");
-	File_Reading(buf, Value);
-	pStats->radio_ErrorsSent = strtoul(Value, NULL, 10);
+    sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'TX packets' | tr -s ' ' | cut -d ':' -f3 | cut -d ' ' -f1");
+    File_Reading(buf, Value);
+    pStats->radio_ErrorsSent = strtoul(Value, NULL, 10);
 
-	sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'RX packets' | tr -s ' ' | cut -d ':' -f4 | cut -d ' ' -f1");
-	File_Reading(buf, Value);
-	pStats->radio_DiscardPacketsReceived = strtoul(Value, NULL, 10);
+    sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'RX packets' | tr -s ' ' | cut -d ':' -f4 | cut -d ' ' -f1");
+    File_Reading(buf, Value);
+    pStats->radio_DiscardPacketsReceived = strtoul(Value, NULL, 10);
 
-	sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'TX packets' | tr -s ' ' | cut -d ':' -f4 | cut -d ' ' -f1");
-	File_Reading(buf, Value);
-	pStats->radio_DiscardPacketsSent = strtoul(Value, NULL, 10);
+    sprintf(buf, "cat /tmp/Radio_Stats.txt | grep 'TX packets' | tr -s ' ' | cut -d ':' -f4 | cut -d ' ' -f1");
+    File_Reading(buf, Value);
+    pStats->radio_DiscardPacketsSent = strtoul(Value, NULL, 10);
 
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n", __func__, __LINE__);
-	return RETURN_OK;
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n", __func__, __LINE__);
+    return RETURN_OK;
 }
 
 INT GetIfacestatus(CHAR *interface_name, CHAR *status)
 {
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n", __func__, __LINE__);
-	CHAR buf[MAX_CMD_SIZE] = {0};
-	FILE *fp = NULL;
-	INT count = 0;
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n", __func__, __LINE__);
+    CHAR buf[MAX_CMD_SIZE] = {0};
+    FILE *fp = NULL;
+    INT count = 0;
 
-	if (interface_name != NULL && (strlen(interface_name) > 1) && status != NULL)
-	{
-		sprintf(buf, "%s%s%s%s%s", "ifconfig -a ", interface_name, " | grep ", interface_name, " | wc -l");
-		File_Reading(buf, status);
-	}
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n", __func__, __LINE__);
-	return RETURN_OK;
+    if (interface_name != NULL && (strlen(interface_name) > 1) && status != NULL)
+    {
+        sprintf(buf, "%s%s%s%s%s", "ifconfig -a ", interface_name, " | grep ", interface_name, " | wc -l");
+        File_Reading(buf, status);
+    }
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n", __func__, __LINE__);
+    return RETURN_OK;
 }
 
 //Get detail radio traffic static info
@@ -2913,7 +2914,7 @@ INT wifi_getBasicTrafficStats(INT apIndex, wifi_basicTrafficStats_t *output_stru
     char buf[1280];
     char *pos = NULL;
 
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
     if (NULL == output_struct)
         return RETURN_ERR;
 
@@ -2944,88 +2945,88 @@ INT wifi_getBasicTrafficStats(INT apIndex, wifi_basicTrafficStats_t *output_stru
     sscanf(buf, "%lu", &output_struct->wifi_Associations);
 
 #if 0
-	//TODO: need to revisit below implementation
-	WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
-	char interface_name[MAX_BUF_SIZE] = {0};
-	char interface_status[MAX_BUF_SIZE] = {0};
-	char Value[MAX_BUF_SIZE] = {0};
-	char buf[MAX_CMD_SIZE] = {0};
-	char cmd[MAX_CMD_SIZE] = {0};
-	FILE *fp = NULL;
-
-	if (NULL == output_struct) {
-		return RETURN_ERR;
-	}
-
-	memset(output_struct, 0, sizeof(wifi_basicTrafficStats_t));
-
-	if((apIndex == 0) || (apIndex == 1) || (apIndex == 4) || (apIndex == 5))
-	{
-		if(apIndex == 0) //private_wifi for 2.4G
-		{
-			GetInterfaceName(interface_name,"/nvram/hostapd0.conf");
-		}
-		else if(apIndex == 1) //private_wifi for 5G
-		{
-			GetInterfaceName(interface_name,"/nvram/hostapd1.conf");
-		}
-		else if(apIndex == 4) //public_wifi for 2.4G
-		{
-			sprintf(cmd,"%s","cat /nvram/hostapd0.conf | grep bss=");
-			if(_syscmd(cmd,buf,sizeof(buf)) == RETURN_ERR)
-			{
-				return RETURN_ERR;
-			}
-			if(buf[0] == '#')//tp-link
-				GetInterfaceName(interface_name,"/nvram/hostapd4.conf");
-			else//tenda
-				GetInterfaceName_virtualInterfaceName_2G(interface_name);
-		}
-		else if(apIndex == 5) //public_wifi for 5G
-		{
-			GetInterfaceName(interface_name,"/nvram/hostapd5.conf");
-		}
-
-		GetIfacestatus(interface_name, interface_status);
-
-		if(0 != strcmp(interface_status, "1"))
-			return RETURN_ERR;
-
-		snprintf(cmd, sizeof(cmd), "ifconfig %s > /tmp/SSID_Stats.txt", interface_name);
-		system(cmd);
-
-		fp = fopen("/tmp/SSID_Stats.txt", "r");
-		if(fp == NULL)
-		{
-			printf("/tmp/SSID_Stats.txt not exists \n");
-			return RETURN_ERR;
-		}
-		fclose(fp);
-
-		sprintf(buf, "cat /tmp/SSID_Stats.txt | grep 'RX packets' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
-		File_Reading(buf, Value);
-		output_struct->wifi_PacketsReceived = strtoul(Value, NULL, 10);
-
-		sprintf(buf, "cat /tmp/SSID_Stats.txt | grep 'TX packets' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
-		File_Reading(buf, Value);
-		output_struct->wifi_PacketsSent = strtoul(Value, NULL, 10);
-
-		sprintf(buf, "cat /tmp/SSID_Stats.txt | grep 'RX bytes' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
-		File_Reading(buf, Value);
-		output_struct->wifi_BytesReceived = strtoul(Value, NULL, 10);
-
-		sprintf(buf, "cat /tmp/SSID_Stats.txt | grep 'TX bytes' | tr -s ' ' | cut -d ':' -f3 | cut -d ' ' -f1");
-		File_Reading(buf, Value);
-		output_struct->wifi_BytesSent = strtoul(Value, NULL, 10);
-
-		/* There is no specific parameter from caller to associate the value wifi_Associations */
-		//sprintf(cmd, "iw dev %s station dump | grep Station | wc -l", interface_name);
-		//_syscmd(cmd, buf, sizeof(buf));
-		//sscanf(buf,"%lu", &output_struct->wifi_Associations);
-	}
+    //TODO: need to revisit below implementation
+    WIFI_ENTRY_EXIT_DEBUG("Inside %s:%d\n",__func__, __LINE__);
+    char interface_name[MAX_BUF_SIZE] = {0};
+    char interface_status[MAX_BUF_SIZE] = {0};
+    char Value[MAX_BUF_SIZE] = {0};
+    char buf[MAX_CMD_SIZE] = {0};
+    char cmd[MAX_CMD_SIZE] = {0};
+    FILE *fp = NULL;
+
+    if (NULL == output_struct) {
+        return RETURN_ERR;
+    }
+
+    memset(output_struct, 0, sizeof(wifi_basicTrafficStats_t));
+
+    if((apIndex == 0) || (apIndex == 1) || (apIndex == 4) || (apIndex == 5))
+    {
+        if(apIndex == 0) //private_wifi for 2.4G
+        {
+            GetInterfaceName(interface_name,"/nvram/hostapd0.conf");
+        }
+        else if(apIndex == 1) //private_wifi for 5G
+        {
+            GetInterfaceName(interface_name,"/nvram/hostapd1.conf");
+        }
+        else if(apIndex == 4) //public_wifi for 2.4G
+        {
+            sprintf(cmd,"%s","cat /nvram/hostapd0.conf | grep bss=");
+            if(_syscmd(cmd,buf,sizeof(buf)) == RETURN_ERR)
+            {
+                return RETURN_ERR;
+            }
+            if(buf[0] == '#')//tp-link
+                GetInterfaceName(interface_name,"/nvram/hostapd4.conf");
+            else//tenda
+                GetInterfaceName_virtualInterfaceName_2G(interface_name);
+        }
+        else if(apIndex == 5) //public_wifi for 5G
+        {
+            GetInterfaceName(interface_name,"/nvram/hostapd5.conf");
+        }
+
+        GetIfacestatus(interface_name, interface_status);
+
+        if(0 != strcmp(interface_status, "1"))
+            return RETURN_ERR;
+
+        snprintf(cmd, sizeof(cmd), "ifconfig %s > /tmp/SSID_Stats.txt", interface_name);
+        system(cmd);
+
+        fp = fopen("/tmp/SSID_Stats.txt", "r");
+        if(fp == NULL)
+        {
+            printf("/tmp/SSID_Stats.txt not exists \n");
+            return RETURN_ERR;
+        }
+        fclose(fp);
+
+        sprintf(buf, "cat /tmp/SSID_Stats.txt | grep 'RX packets' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
+        File_Reading(buf, Value);
+        output_struct->wifi_PacketsReceived = strtoul(Value, NULL, 10);
+
+        sprintf(buf, "cat /tmp/SSID_Stats.txt | grep 'TX packets' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
+        File_Reading(buf, Value);
+        output_struct->wifi_PacketsSent = strtoul(Value, NULL, 10);
+
+        sprintf(buf, "cat /tmp/SSID_Stats.txt | grep 'RX bytes' | tr -s ' ' | cut -d ':' -f2 | cut -d ' ' -f1");
+        File_Reading(buf, Value);
+        output_struct->wifi_BytesReceived = strtoul(Value, NULL, 10);
+
+        sprintf(buf, "cat /tmp/SSID_Stats.txt | grep 'TX bytes' | tr -s ' ' | cut -d ':' -f3 | cut -d ' ' -f1");
+        File_Reading(buf, Value);
+        output_struct->wifi_BytesSent = strtoul(Value, NULL, 10);
+
+        /* There is no specific parameter from caller to associate the value wifi_Associations */
+        //sprintf(cmd, "iw dev %s station dump | grep Station | wc -l", interface_name);
+        //_syscmd(cmd, buf, sizeof(buf));
+        //sscanf(buf,"%lu", &output_struct->wifi_Associations);
+    }
 #endif
-	WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
-	return RETURN_OK;
+    WIFI_ENTRY_EXIT_DEBUG("Exiting %s:%d\n",__func__, __LINE__);
+    return RETURN_OK;
 }
 
 INT wifi_getWifiTrafficStats(INT apIndex, wifi_trafficStats_t *output_struct)
@@ -3419,15 +3420,15 @@ INT wifi_kickAssociatedDevice(INT apIndex, wifi_device_t *device)
 //enables CTS protection for the radio used by this AP
 INT wifi_setRadioCtsProtectionEnable(INT apIndex, BOOL enable)
 {
-	//save config and Apply instantly
-	return RETURN_ERR;
+    //save config and Apply instantly
+    return RETURN_ERR;
 }
 
 // enables OBSS Coexistence - fall back to 20MHz if necessary for the radio used by this ap
 INT wifi_setRadioObssCoexistenceEnable(INT apIndex, BOOL enable)
 {
-	//save config and Apply instantly
-	return RETURN_ERR;
+    //save config and Apply instantly
+    return RETURN_ERR;
 }
 
 //P3 // sets the fragmentation threshold in bytes for the radio used by this ap
@@ -3493,8 +3494,8 @@ INT wifi_getRadioRxChainMask(INT radioIndex, INT *output_int)
 //P2  // sets the number of Rx streams to an enviornment variable
 INT wifi_setRadioRxChainMask(INT radioIndex, INT numStreams)
 {
-	//save to wifi config, wait for wifi reset or wifi_pushRxChainMask to apply
-	return RETURN_ERR;
+    //save to wifi config, wait for wifi reset or wifi_pushRxChainMask to apply
+    return RETURN_ERR;
 }
 
 //Get radio RDG enable setting
@@ -3518,7 +3519,7 @@ INT wifi_getRadioReverseDirectionGrantEnable(INT radioIndex, BOOL *output_bool)
 //Set radio RDG enable setting
 INT wifi_setRadioReverseDirectionGrantEnable(INT radioIndex, BOOL enable)
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Get radio ADDBA enable setting
@@ -3533,7 +3534,7 @@ INT wifi_getRadioDeclineBARequestEnable(INT radioIndex, BOOL *output_bool)
 //Set radio ADDBA enable setting
 INT wifi_setRadioDeclineBARequestEnable(INT radioIndex, BOOL enable)
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Get radio auto block ack enable setting
@@ -3548,7 +3549,7 @@ INT wifi_getRadioAutoBlockAckEnable(INT radioIndex, BOOL *output_bool)
 //Set radio auto block ack enable setting
 INT wifi_setRadioAutoBlockAckEnable(INT radioIndex, BOOL enable)
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Get radio 11n pure mode enable support
@@ -3572,7 +3573,7 @@ INT wifi_getRadio11nGreenfieldEnable(INT radioIndex, BOOL *output_bool)
 //Set radio 11n pure mode enable setting
 INT wifi_setRadio11nGreenfieldEnable(INT radioIndex, BOOL enable)
 {
-	return RETURN_ERR;
+    return RETURN_ERR;
 }
 
 //Get radio IGMP snooping enable setting
@@ -3727,8 +3728,8 @@ INT wifi_setApBeaconInterval(INT apIndex, INT beaconInterval)
 
 INT wifi_setDTIMInterval(INT apIndex, INT dtimInterval)
 {
-	//save config and apply instantly
-	return RETURN_ERR;
+    //save config and apply instantly
+    return RETURN_ERR;
 }
 
 // Get the packet size threshold supported.
@@ -3878,8 +3879,8 @@ INT wifi_disableApEncryption(INT apIndex)
 // mode mapping as: 1: open, 2: shared, 4:auto
 INT wifi_setApAuthMode(INT apIndex, INT mode)
 {
-	//Apply instantly
-	return RETURN_ERR;
+    //Apply instantly
+    return RETURN_ERR;
 }
 
 // sets an enviornment variable for the authMode. Valid strings are "None", "EAPAuthentication" or "SharedAuthentication"
@@ -3930,7 +3931,7 @@ INT wifi_getApBasicAuthenticationMode(INT apIndex, CHAR *authMode)
         wifi_hostapdRead(config_file, "wpa_key_mgmt", authMode, 32);
         wifi_dbg_printf("\n[%s]: AuthMode Name is : %s",__func__,authMode);
         if(strcmp(authMode,"WPA-PSK") == 0)
-	        strcpy(authMode,"SharedAuthentication");
+            strcpy(authMode,"SharedAuthentication");
         else if(strcmp(authMode,"WPA-EAP") == 0)
             strcpy(authMode,"EAPAuthentication");
     }
@@ -4498,24 +4499,24 @@ INT wifi_getApStatus(INT apIndex, CHAR *output_string)
 // Outputs the AP "Enabled" "Disabled" status from driver 
 INT wifi_getApStatus(INT apIndex, CHAR *output_string) 
 {
-	char cmd[128] = {0};
-	char buf[128] = {0};
-	INT  wlanIndex;
+    char cmd[128] = {0};
+    char buf[128] = {0};
+    INT  wlanIndex;
 
 
-	if( 0 == apIndex ) // For 2.4 GHz
-		wlanIndex = wifi_getApIndexForWiFiBand(band_2_4);
-	else
-		wlanIndex = wifi_getApIndexForWiFiBand(band_5);
+    if( 0 == apIndex ) // For 2.4 GHz
+        wlanIndex = wifi_getApIndexForWiFiBand(band_2_4);
+    else
+        wlanIndex = wifi_getApIndexForWiFiBand(band_5);
 
-	sprintf(cmd,"iwconfig  | grep wlan%d", wlanIndex);
-	_syscmd(cmd, buf, sizeof(buf));
-	
-	if(strlen(buf)>3)
-		snprintf(output_string, 32, "Up");
-	else
-		snprintf(output_string, 32, "Disable");
-	return RETURN_OK;
+    sprintf(cmd,"iwconfig  | grep wlan%d", wlanIndex);
+    _syscmd(cmd, buf, sizeof(buf));
+
+    if(strlen(buf)>3)
+        snprintf(output_string, 32, "Up");
+    else
+        snprintf(output_string, 32, "Disable");
+    return RETURN_OK;
 }
 #endif
 
@@ -5680,21 +5681,20 @@ int wifihal_interfacestatus(CHAR *wifi_status,CHAR *interface_name)
 
 /* #define HOSTAPD_STA_PARAM_ENTRIES 29
 struct hostapd_sta_param {
-	char key[50];
-	char value[100];
+    char key[50];
+    char value[100];
 }
 
 static char * hostapd_st_get_param(struct hostapd_sta_param * params, char *key){
+    int i = 0;
 
-	int i = 0;
-
-	while(i<HOSTAPD_STA_PARAM_ENTRIES) {
-	if (strncmp(params[i].key,key,50) == 0){
-		return &params[i].value;
-	}
-	i++;
-	}
-	return NULL;
+    while(i<HOSTAPD_STA_PARAM_ENTRIES) {
+        if (strncmp(params[i].key,key,50) == 0){
+            return &params[i].value;
+        }
+        i++;
+    }
+    return NULL;
 
 } */
 
-- 
2.7.4

